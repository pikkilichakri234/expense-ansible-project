- name: create ec2 and route53 records
  hosts: local
  connection: local
  vars:
    subnet_id: "subnet-05e20b3a550ac9cab"  #replace with your subnet-id
    sg_id: "sg-001ef9d79c9440437" ##replace with your security-group-id
    ami_id: "ami-09c813fb71547fc4f"
    instances:
    - frontend
    - backend
    - mysql
    zone: omnamahashivaya.online
  tasks:
  - name: ansible to install boto3 and botocore
    ansible.builtin.pip:
      name:
      - boto3
      - botocore
      executable: pip3.9

  - name: create ec2-instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      vpc_subnet_id: "{{ subnet_id }}"
      instance_type: t2.micro
      security_group: "{{ sg_id }}"
      image_id: "{{ ami_id }}"
    loop: "{{ instances }}"
    register: ec2_instances

  - name: print the output
    ansible.builtin.debug:
      msg: to create instances is :: "{{ ec2_instances }}"

  - name: create route53 private records
    amazon.aws.route53:
      state: present
      zone: "{{ zone}}" # omnamahashivaya.online
      record: "{{item.item}}.{{ zone}}" # mysql.omnamahashivaya.online   # item.item= access the names of the (mysql, backend, frontend) stored in the item key of the dictionary
      type: A
      ttl: 1
      value: "{{item.instances{0].private_ip_address}}"
      wait: true
      overwrite: true
    loop: "{{ ec2_instances.results }}"

  - name: create route53 public records
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}" #omnamahashivaya.online
      record: "{{ zone }}" #omnamahashivaya.online
      type: A
      ttl: 1
      value: "{{ item.instances[0].pubic_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_instances.results }}"
    when: item.item == "frontend" # when keyword should not have {{}}


# item.item= access the names of the instances (mysql, backend, frontend) stored in the item key of the dictionary
    

